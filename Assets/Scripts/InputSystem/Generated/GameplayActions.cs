//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.1.0
//     from Assets/Resources/Others/GameplayActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayActions"",
    ""maps"": [
        {
            ""name"": ""In-level Actions"",
            ""id"": ""85dcd7b7-694f-4a49-9e72-0f1bebc4ad9f"",
            ""actions"": [
                {
                    ""name"": ""Restart/Reload"",
                    ""type"": ""Button"",
                    ""id"": ""cf391b20-0672-4b6a-a37b-f35141d5ef16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """"
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""673be9fc-f607-4892-8d33-784786274f73"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Restart/Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68e8a288-45ef-4a64-a63b-8d460aacdd75"",
                    ""path"": ""<Keyboard>/#(r)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Restart/Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""307cf123-9463-4cb5-a740-6cc78e75cb8b"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Restart/Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default"",
            ""bindingGroup"": ""Default"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // In-level Actions
        m_InlevelActions = asset.FindActionMap("In-level Actions", throwIfNotFound: true);
        m_InlevelActions_RestartReload = m_InlevelActions.FindAction("Restart/Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // In-level Actions
    private readonly InputActionMap m_InlevelActions;
    private IInlevelActionsActions m_InlevelActionsActionsCallbackInterface;
    private readonly InputAction m_InlevelActions_RestartReload;
    public struct InlevelActionsActions
    {
        private @GameplayActions m_Wrapper;
        public InlevelActionsActions(@GameplayActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @RestartReload => m_Wrapper.m_InlevelActions_RestartReload;
        public InputActionMap Get() { return m_Wrapper.m_InlevelActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InlevelActionsActions set) { return set.Get(); }
        public void SetCallbacks(IInlevelActionsActions instance)
        {
            if (m_Wrapper.m_InlevelActionsActionsCallbackInterface != null)
            {
                @RestartReload.started -= m_Wrapper.m_InlevelActionsActionsCallbackInterface.OnRestartReload;
                @RestartReload.performed -= m_Wrapper.m_InlevelActionsActionsCallbackInterface.OnRestartReload;
                @RestartReload.canceled -= m_Wrapper.m_InlevelActionsActionsCallbackInterface.OnRestartReload;
            }
            m_Wrapper.m_InlevelActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RestartReload.started += instance.OnRestartReload;
                @RestartReload.performed += instance.OnRestartReload;
                @RestartReload.canceled += instance.OnRestartReload;
            }
        }
    }
    public InlevelActionsActions @InlevelActions => new InlevelActionsActions(this);
    private int m_DefaultSchemeIndex = -1;
    public InputControlScheme DefaultScheme
    {
        get
        {
            if (m_DefaultSchemeIndex == -1) m_DefaultSchemeIndex = asset.FindControlSchemeIndex("Default");
            return asset.controlSchemes[m_DefaultSchemeIndex];
        }
    }
    public interface IInlevelActionsActions
    {
        void OnRestartReload(InputAction.CallbackContext context);
    }
}
